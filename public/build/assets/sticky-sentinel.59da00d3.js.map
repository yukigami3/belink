{"version":3,"mappings":"mIAUA,MAAMA,EAAYC,EAAMC,KAAK,IAAMC,aAAO,4BAAxB,wGAOX,SAASC,EAAU,CACxBC,eACAC,OAAO,OACPC,OAHwB,EAIU,CAClC,KAAM,CAACC,EAAOC,CAAR,EAAoBC,mBAASL,CAAD,EAC5B,CAACM,EAASC,CAAV,EAAwBF,mBAAkB,EAAV,EAEtC,SACGG,EAAD,CAAQ,KAAK,aAAa,UAAU,gBAApC,UACEC,EAACC,EAAD,UAAeR,EADjB,EAEEO,EAACE,EAAD,CAAY,UAAU,qBAAqB,QAAQ,MAAnD,WACGC,mBAAD,CACE,WACE,OAAK,UAAU,gDAAf,WACGC,EAAD,CACE,aAAW,oBACX,gBAFF,GAGE,KAAK,KAHP,EAHN,aAWGlB,EAAD,CACE,OACA,SAAsBmB,IACpBV,EAASU,CAAD,CACT,EACD,aAAcX,GAAS,GACvB,gBAAiBI,EANnB,EAXF,EAHJ,EAwBEE,EAACM,EAAD,CAAQ,UAAkB,QAxB5B,GADF,CA4BD,CAMD,SAASA,EAAO,CAACT,UAASH,OAAV,EAA+B,CACvC,MAACa,SAASC,EAAhB,EACA,SACGC,EAAD,CAAc,WAAd,aACET,EAACU,EAAD,CAAQ,QAAS,IAAMH,EAAvB,aACGI,EAAD,CAAO,QAAQ,SAAf,EAFJ,EAIEX,EAACU,EAAD,CACE,SAAU,CAACb,EACX,QAAQ,OACR,MAAM,UACN,QAAS,IAAM,CACbU,EAAMb,CAAD,CACN,EANH,WAQGiB,EAAD,CAAO,QAAQ,OAAf,EAZJ,GADF,CAiBD,CC5EYC,QAAeC,EAC1Bb,UAAM,EAAE,mJAAR,CADuC,EAEvC,kBAFuC,ECAlC,SAASc,GAAoB,CAClC,KAAM,CAACC,EAAUC,CAAW,EAAIpB,mBAAS,EAAK,EAExCqB,EAAcC,mBAEdC,EAAcC,sBAAaC,GAAoC,OACnE,GAAIA,EAAU,CACZ,MAAMC,EAAW,IAAI,qBACnB,CAAC,CAACC,CAAC,IAAMP,EAAYO,EAAE,kBAAoB,CAAC,EAC5C,CAAC,UAAW,CAAC,CAAC,CAAC,GAEjBN,EAAY,QAAUK,EACtBA,EAAS,QAAQD,CAAQ,OAChBJ,EAAY,WACrBO,IAAY,UAAZ,QAAqB,aAEzB,EAAG,CAAE,GAEE,OAAC,WAAU,cACpB","names":["AceEditor","React","lazy","__vitePreload","AceDialog","defaultValue","mode","title","value","setValue","useState","isValid","setIsValid","Dialog","_jsx","DialogHeader","DialogBody","Suspense","ProgressCircle","newValue","Footer","close","useDialogContext","DialogFooter","Button","Trans","MoreVertIcon","createSvgIcon","useStickySentinel","isSticky","setIsSticky","observerRef","useRef","sentinelRef","useCallback","sentinel","observer","e","_a"],"sources":["../../../common/resources/client/ace-editor/ace-dialog.tsx","../../../common/resources/client/icons/material/MoreVert.tsx","../../../common/resources/client/utils/hooks/sticky-sentinel.ts"],"sourcesContent":["import React, {ReactNode, Suspense, useState} from 'react';\nimport {Dialog} from '../ui/overlays/dialog/dialog';\nimport {DialogHeader} from '../ui/overlays/dialog/dialog-header';\nimport {Trans} from '../i18n/trans';\nimport {DialogBody} from '../ui/overlays/dialog/dialog-body';\nimport {ProgressCircle} from '../ui/progress/progress-circle';\nimport {useDialogContext} from '../ui/overlays/dialog/dialog-context';\nimport {DialogFooter} from '../ui/overlays/dialog/dialog-footer';\nimport {Button} from '../ui/buttons/button';\n\nconst AceEditor = React.lazy(() => import('./ace-editor'));\n\ninterface TextEditorSourcecodeDialogProps {\n  defaultValue: string;\n  mode?: 'css' | 'html';\n  title: ReactNode;\n}\nexport function AceDialog({\n  defaultValue,\n  mode = 'html',\n  title,\n}: TextEditorSourcecodeDialogProps) {\n  const [value, setValue] = useState(defaultValue);\n  const [isValid, setIsValid] = useState<boolean>(true);\n\n  return (\n    <Dialog size=\"fullscreen\" className=\"h-full w-full\">\n      <DialogHeader>{title}</DialogHeader>\n      <DialogBody className=\"relative flex-auto\" padding=\"p-0\">\n        <Suspense\n          fallback={\n            <div className=\"flex items-center justify-center w-full h-400\">\n              <ProgressCircle\n                aria-label=\"Loading editor...\"\n                isIndeterminate\n                size=\"md\"\n              />\n            </div>\n          }\n        >\n          <AceEditor\n            mode={mode}\n            onChange={newValue => {\n              setValue(newValue);\n            }}\n            defaultValue={value || ''}\n            onIsValidChange={setIsValid}\n          />\n        </Suspense>\n      </DialogBody>\n      <Footer isValid={isValid} value={value} />\n    </Dialog>\n  );\n}\n\ninterface FooterProps {\n  isValid: boolean;\n  value?: string;\n}\nfunction Footer({isValid, value}: FooterProps) {\n  const {close} = useDialogContext();\n  return (\n    <DialogFooter dividerTop>\n      <Button onClick={() => close()}>\n        <Trans message=\"Cancel\" />\n      </Button>\n      <Button\n        disabled={!isValid}\n        variant=\"flat\"\n        color=\"primary\"\n        onClick={() => {\n          close(value);\n        }}\n      >\n        <Trans message=\"Save\" />\n      </Button>\n    </DialogFooter>\n  );\n}\n","import {createSvgIcon} from '../create-svg-icon';\n\nexport const MoreVertIcon = createSvgIcon(\n  <path d=\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\" />\n, 'MoreVertOutlined');\n","import {useCallback, useRef, useState} from 'react';\n\nexport function useStickySentinel() {\n  const [isSticky, setIsSticky] = useState(false);\n\n  const observerRef = useRef<IntersectionObserver>();\n\n  const sentinelRef = useCallback((sentinel: HTMLDivElement | null) => {\n    if (sentinel) {\n      const observer = new IntersectionObserver(\n        ([e]) => setIsSticky(e.intersectionRatio < 1),\n        {threshold: [1]}\n      );\n      observerRef.current = observer;\n      observer.observe(sentinel);\n    } else if (observerRef.current) {\n      observerRef.current?.disconnect();\n    }\n  }, []);\n\n  return {isSticky, sentinelRef};\n}\n"],"file":"assets/sticky-sentinel.59da00d3.js"}